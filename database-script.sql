-- Create the database if it does not exist
-- NOTE: This command typically needs to be run outside of a connected database,
-- e.g., from psql command line directly, or by connecting to the default 'postgres' database.
-- If running this script inside a specific database connection, you might omit this line
-- and create the database manually first.
CREATE DATABASE store_management;

-- Connect to the newly created database (or manually connect if running line by line)
--\c store_management;

-- Enable the uuid-ossp extension for generating UUIDs, if not already enabled.
-- This is required for the gen_random_uuid() function.
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create the 'Roles' table if it does not already exist.
-- This ensures that running the script multiple times won't cause an error.
CREATE TABLE IF NOT EXISTS Roles (
    role_id SERIAL PRIMARY KEY,             -- Unique identifier for the role, auto-increments
    role_name VARCHAR(255) NOT NULL UNIQUE, -- Name of the role, must be unique and not null
    is_active BOOLEAN DEFAULT TRUE          -- Status of the role, defaults to active (TRUE)
);

-- Insert seed data into 'Roles' table using ON CONFLICT DO NOTHING for idempotency.
INSERT INTO Roles (role_name, is_active)
VALUES ('superadmin', TRUE)
ON CONFLICT (role_name) DO NOTHING;

INSERT INTO Roles (role_name, is_active)
VALUES ('store-maker', TRUE)
ON CONFLICT (role_name) DO NOTHING;

INSERT INTO Roles (role_name, is_active)
VALUES ('store-checker', TRUE)
ON CONFLICT (role_name) DO NOTHING;

INSERT INTO Roles (role_name, is_active)
VALUES ('warehouse-checker', TRUE)
ON CONFLICT (role_name) DO NOTHING;

INSERT INTO Roles (role_name, is_active)
VALUES ('warehouse-maker', TRUE)
ON CONFLICT (role_name) DO NOTHING;

-- Create the 'Stores' table if it does not already exist.
-- This table stores information about various retail stores.
CREATE TABLE IF NOT EXISTS Stores (
    store_id SERIAL PRIMARY KEY,            -- Unique identifier for the store
    store_name VARCHAR(255) NOT NULL UNIQUE,  -- Name of the store, must be unique
    address VARCHAR(255),                     -- Street address of the store
    city VARCHAR(100),                        -- City where the store is located
    state VARCHAR(50),                        -- State where the store is located
    zip_code VARCHAR(10),                     -- Zip code of the store
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp when the store record was created
);

-- Add dummy data into the 'Stores' table using ON CONFLICT DO NOTHING for idempotency.
INSERT INTO Stores (store_name, address, city, state, zip_code)
VALUES ('Main Street Store', '123 Main St', 'Anytown', 'CA', '90210')
ON CONFLICT (store_name) DO NOTHING;

INSERT INTO Stores (store_name, address, city, state, zip_code)
VALUES ('Downtown Plaza', '456 Oak Ave', 'Metropolis', 'NY', '10001')
ON CONFLICT (store_name) DO NOTHING;

INSERT INTO Stores (store_name, address, city, state, zip_code)
VALUES ('Northside Market', '789 Pine Ln', 'Gotham', 'IL', '60601')
ON CONFLICT (store_name) DO NOTHING;

INSERT INTO Stores (store_name, address, city, state, zip_code)
VALUES ('Riverside Boutique', '101 River Rd', 'Star City', 'TX', '75001')
ON CONFLICT (store_name) DO NOTHING;

INSERT INTO Stores (store_name, address, city, state, zip_code)
VALUES ('East End Emporium', '202 Bridge St', 'Central City', 'FL', '33101')
ON CONFLICT (store_name) DO NOTHING;


-- Create the 'Users' table if it does not already exist.
-- This table stores user information, links to the Roles table via role_id, and now Stores via store_id.
CREATE TABLE IF NOT EXISTS Users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Unique identifier for the user (UUID), generated by PostgreSQL
    user_name VARCHAR(255) NOT NULL,        -- User's display name
    password_hash VARCHAR(255) NOT NULL,    -- Hashed password for security
    email VARCHAR(255) UNIQUE NOT NULL,     -- User's email, must be unique
    is_active BOOLEAN DEFAULT TRUE,         -- Status of the user account, defaults to active
    role_id INT,                            -- Foreign key referencing the role_id in the Roles table
    store_id INT,                           -- Foreign key referencing the store_id in the Stores table (can be NULL)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the user record was created
    FOREIGN KEY (role_id) REFERENCES Roles(role_id), -- Defines the foreign key relationship for Roles
    FOREIGN KEY (store_id) REFERENCES Stores(store_id) -- Defines the foreign key relationship for Stores
);

-- Add dummy data into the 'Users' table using ON CONFLICT (email) DO NOTHING for idempotency.
-- We use gen_random_uuid() for user_id to ensure a unique GUID, and dynamically fetch role_id and store_id.
-- Note: Not all users may be associated with a store, so store_id can be NULL for some roles (e.g., superadmin).

-- Using CTEs (Common Table Expressions) to make inserts more readable and robust
WITH superadmin_role AS (SELECT role_id FROM Roles WHERE role_name = 'superadmin'),
     main_street_store AS (SELECT store_id FROM Stores WHERE store_name = 'Main Street Store'),
     downtown_plaza_store AS (SELECT store_id FROM Stores WHERE store_name = 'Downtown Plaza'),
     store_maker_role AS (SELECT role_id FROM Roles WHERE role_name = 'store-maker'),
     store_checker_role AS (SELECT role_id FROM Roles WHERE role_name = 'store-checker'),
     warehouse_maker_role AS (SELECT role_id FROM Roles WHERE role_name = 'warehouse-maker'),
     warehouse_checker_role AS (SELECT role_id FROM Roles WHERE role_name = 'warehouse-checker')
INSERT INTO Users (user_name, password_hash, email, is_active, role_id, store_id)
VALUES ('john_doe', 'hashedpassword1', 'john.doe@example.com', TRUE, (SELECT role_id FROM superadmin_role), NULL),
       ('jane_smith', 'hashedpassword2', 'jane.smith@example.com', TRUE, (SELECT role_id FROM store_maker_role), (SELECT store_id FROM main_street_store)),
       ('mike_jones', 'hashedpassword3', 'mike.jones@example.com', TRUE, (SELECT role_id FROM store_checker_role), (SELECT store_id FROM downtown_plaza_store)),
       ('sarah_brown', 'hashedpassword4', 'sarah.brown@example.com', TRUE, (SELECT role_id FROM warehouse_maker_role), NULL),
       ('david_green', 'hashedpassword5', 'david.green@example.com', TRUE, (SELECT role_id FROM warehouse_checker_role), NULL)
ON CONFLICT (email) DO NOTHING;
--===================================================================================================================
-- Stored Procedure (Function in PostgreSQL) to create a new store and default users
CREATE OR REPLACE FUNCTION create_store_with_users(
    _store_name VARCHAR(255),
    _address VARCHAR(255),
    _city VARCHAR(100),
    _state VARCHAR(50),
    _zip_code VARCHAR(10)
)
RETURNS INT AS $$
DECLARE
    new_store_id INT;
    store_maker_role_id INT;
    store_checker_role_id INT;
BEGIN
    -- Get the role_ids for 'store-maker' and 'store-checker'
    SELECT role_id INTO store_maker_role_id FROM Roles WHERE role_name = 'store-maker';
    SELECT role_id INTO store_checker_role_id FROM Roles WHERE role_name = 'store-checker';

    -- Insert the new store and get its ID
    INSERT INTO Stores (store_name, address, city, state, zip_code)
    VALUES (_store_name, _address, _city, _state, _zip_code)
    ON CONFLICT (store_name) DO NOTHING
    RETURNING store_id INTO new_store_id;

    -- If the store already existed, new_store_id might be NULL or the existing ID.
    -- We need to ensure we have the ID for the store, whether newly created or existing.
    IF new_store_id IS NULL THEN
        SELECT store_id INTO new_store_id FROM Stores WHERE store_name = _store_name;
    END IF;

    -- If store_id is still NULL, it means something went wrong (e.g., role_ids not found)
    IF new_store_id IS NULL OR store_maker_role_id IS NULL OR store_checker_role_id IS NULL THEN
        RAISE EXCEPTION 'Failed to create store or retrieve required role IDs. Check if roles exist or store name is truly unique.';
    END IF;

    -- Create default 'store-maker' user for the new store
    INSERT INTO Users (user_name, password_hash, email, is_active, role_id, store_id)
    VALUES (LOWER(REPLACE(_store_name, ' ', '')) || '_maker', -- e.g., 'newstore_maker'
            'default_maker_password_hash',
            LOWER(REPLACE(_store_name, ' ', '')) || '_maker@example.com',
            TRUE,
            store_maker_role_id,
            new_store_id)
    ON CONFLICT (email) DO NOTHING; -- Avoid re-inserting if email already exists

    -- Create default 'store-checker' user for the new store
    INSERT INTO Users (user_name, password_hash, email, is_active, role_id, store_id)
    VALUES (LOWER(REPLACE(_store_name, ' ', '')) || '_checker', -- e.g., 'newstore_checker'
            'default_checker_password_hash',
            LOWER(REPLACE(_store_name, ' ', '')) || '_checker@example.com',
            TRUE,
            store_checker_role_id,
            new_store_id)
    ON CONFLICT (email) DO NOTHING; -- Avoid re-inserting if email already exists

    RETURN new_store_id;
END;
$$ LANGUAGE plpgsql;

-- Example of how to call the function:
-- SELECT create_store_with_users('New Example Store', '789 Elm St', 'Springfield', 'IL', '62701');
-- SELECT create_store_with_users('Another Test Store', '100 Market St', 'Portland', 'OR', '97204');
--===================================================================================================================