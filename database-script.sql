-- Create the database if it does not exist
-- NOTE: This command typically needs to be run outside of a connected database,
-- e.g., from psql command line directly, or by connecting to the default 'postgres' database.
-- If running this script inside a specific database connection, you might omit this line
-- and create the database manually first.
-- 
-- PostgreSQL doesn't support "IF NOT EXISTS" for CREATE DATABASE, so we use a different approach:
-- Method 1: Run this manually if database doesn't exist
-- CREATE DATABASE store_management;
--
-- Method 2: Use this PL/pgSQL block (uncomment to use)
/*
DO $$
BEGIN
   IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'store_management') THEN
      PERFORM dblink_exec('dbname=' || current_database(), 'CREATE DATABASE store_management');
   END IF;
END
$$;
*/

-- Connect to the newly created database (or manually connect if running line by line)
--\c store_management;

-- Enable the uuid-ossp extension for generating UUIDs, if not already enabled.
-- This is required for the gen_random_uuid() function.
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Enable the pgcrypto extension for password hashing
-- This is required for the crypt() and gen_salt() functions.
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Drop existing tables in reverse order of dependencies to avoid foreign key constraint errors
DROP TABLE IF EXISTS Products CASCADE;
DROP TABLE IF EXISTS Categories CASCADE;
DROP TABLE IF EXISTS Users CASCADE;
DROP TABLE IF EXISTS Stores CASCADE;
DROP TABLE IF EXISTS Roles CASCADE;

-- Drop existing functions/procedures
DROP FUNCTION IF EXISTS create_store_with_users(VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR, BOOLEAN);

-- Create the 'Roles' table
CREATE TABLE Roles (
    role_id SERIAL PRIMARY KEY,             -- Unique identifier for the role, auto-increments
    role_name VARCHAR(255) NOT NULL UNIQUE, -- Name of the role, must be unique and not null
    is_active BOOLEAN DEFAULT TRUE          -- Status of the role, defaults to active (TRUE)
);

-- Insert seed data into 'Roles' table
INSERT INTO Roles (role_name, is_active)
VALUES ('superadmin', TRUE);

INSERT INTO Roles (role_name, is_active)
VALUES ('store-maker', TRUE);

INSERT INTO Roles (role_name, is_active)
VALUES ('store-checker', TRUE);

INSERT INTO Roles (role_name, is_active)
VALUES ('warehouse-checker', TRUE);

INSERT INTO Roles (role_name, is_active)
VALUES ('warehouse-maker', TRUE);

-- Create the 'Stores' table
-- This table stores information about various retail stores.
CREATE TABLE Stores (
    store_id SERIAL PRIMARY KEY,            -- Unique identifier for the store
    store_name VARCHAR(255) NOT NULL UNIQUE,  -- Name of the store, must be unique
    address VARCHAR(255),                     -- Street address of the store
    city VARCHAR(100),                        -- City where the store is located
    state VARCHAR(50),                        -- State where the store is located
    zip_code VARCHAR(10),                     -- Zip code of the store
    email VARCHAR(255) UNIQUE,                -- Email address for the store, can be NULL but must be unique if present
    is_active BOOLEAN DEFAULT TRUE,           -- Status of the store, defaults to active
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp when the store record was created
);

-- Add dummy data into the 'Stores' table
INSERT INTO Stores (store_name, address, city, state, zip_code, email, is_active)
VALUES ('Main Street Store', '123 Main St', 'Anytown', 'CA', '90210', 'mainstreet@example.com', TRUE);

INSERT INTO Stores (store_name, address, city, state, zip_code, email, is_active)
VALUES ('Downtown Plaza', '456 Oak Ave', 'Metropolis', 'NY', '10001', 'downtownplaza@example.com', TRUE);

INSERT INTO Stores (store_name, address, city, state, zip_code, email, is_active)
VALUES ('Northside Market', '789 Pine Ln', 'Gotham', 'IL', '60601', 'northsidemarket@example.com', TRUE);

INSERT INTO Stores (store_name, address, city, state, zip_code, email, is_active)
VALUES ('Riverside Boutique', '101 River Rd', 'Star City', 'TX', '75001', 'riversideboutique@example.com', TRUE);

INSERT INTO Stores (store_name, address, city, state, zip_code, email, is_active)
VALUES ('East End Emporium', '202 Bridge St', 'Central City', 'FL', '33101', 'eastendemporium@example.com', TRUE);


-- Create the 'Users' table
-- This table stores user information, links to the Roles table via role_id, and now Stores via store_id.
CREATE TABLE Users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Unique identifier for the user (UUID), generated by PostgreSQL
    user_name VARCHAR(255) NOT NULL,        -- User's display name
    password_hash VARCHAR(255) NOT NULL,    -- Hashed password for security
    email VARCHAR(255) UNIQUE NOT NULL,     -- User's email, must be unique
    is_active BOOLEAN DEFAULT TRUE,         -- Status of the user account, defaults to active
    role_id INT,                            -- Foreign key referencing the role_id in the Roles table
    store_id INT,                           -- Foreign key referencing the store_id in the Stores table (can be NULL)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the user record was created
    FOREIGN KEY (role_id) REFERENCES Roles(role_id), -- Defines the foreign key relationship for Roles
    FOREIGN KEY (store_id) REFERENCES Stores(store_id) -- Defines the foreign key relationship for Stores
);

-- Add dummy data into the 'Users' table
-- We use gen_random_uuid() for user_id to ensure a unique GUID, and dynamically fetch role_id and store_id.
-- Note: Not all users may be associated with a store, so store_id can be NULL for some roles (e.g., superadmin).
-- 
-- DEFAULT PASSWORDS (for testing only - change in production):
-- All users: password123 (generated using PostgreSQL's crypt function with BCrypt)
-- Note: Each user will get a unique BCrypt hash even for the same password

-- Using CTEs (Common Table Expressions) to make inserts more readable and robust
WITH superadmin_role AS (SELECT role_id FROM Roles WHERE role_name = 'superadmin'),
     main_street_store AS (SELECT store_id FROM Stores WHERE store_name = 'Main Street Store'),
     downtown_plaza_store AS (SELECT store_id FROM Stores WHERE store_name = 'Downtown Plaza'),
     store_maker_role AS (SELECT role_id FROM Roles WHERE role_name = 'store-maker'),
     store_checker_role AS (SELECT role_id FROM Roles WHERE role_name = 'store-checker'),
     warehouse_maker_role AS (SELECT role_id FROM Roles WHERE role_name = 'warehouse-maker'),
     warehouse_checker_role AS (SELECT role_id FROM Roles WHERE role_name = 'warehouse-checker')
INSERT INTO Users (user_name, password_hash, email, is_active, role_id, store_id)
VALUES ('john_doe', crypt('password123', gen_salt('bf', 11)), 'john.doe@example.com', TRUE, (SELECT role_id FROM superadmin_role), NULL),
       ('jane_smith', crypt('password123', gen_salt('bf', 11)), 'jane.smith@example.com', TRUE, (SELECT role_id FROM store_maker_role), (SELECT store_id FROM main_street_store)),
       ('mike_jones', crypt('password123', gen_salt('bf', 11)), 'mike.jones@example.com', TRUE, (SELECT role_id FROM store_checker_role), (SELECT store_id FROM downtown_plaza_store)),
       ('sarah_brown', crypt('password123', gen_salt('bf', 11)), 'sarah.brown@example.com', TRUE, (SELECT role_id FROM warehouse_maker_role), NULL),
       ('david_green', crypt('password123', gen_salt('bf', 11)), 'david.green@example.com', TRUE, (SELECT role_id FROM warehouse_checker_role), NULL);

-- Stored Procedure (Function in PostgreSQL) to create a new store and default users
CREATE OR REPLACE FUNCTION create_store_with_users(
    _store_name VARCHAR(255),
    _address VARCHAR(255),
    _city VARCHAR(100),
    _state VARCHAR(50),
    _zip_code VARCHAR(10),
    _store_email VARCHAR(255), -- Added new parameter for store email
    _is_active BOOLEAN DEFAULT TRUE -- Added new parameter for store active status
)
RETURNS INT AS $$
DECLARE
    new_store_id INT;
    store_maker_role_id INT;
    store_checker_role_id INT;
BEGIN
    -- Get the role_ids for 'store-maker' and 'store-checker'
    SELECT role_id INTO store_maker_role_id FROM Roles WHERE role_name = 'store-maker';
    SELECT role_id INTO store_checker_role_id FROM Roles WHERE role_name = 'store-checker';

    -- Insert the new store and get its ID
    INSERT INTO Stores (store_name, address, city, state, zip_code, email, is_active) -- Included email and is_active here
    VALUES (_store_name, _address, _city, _state, _zip_code, _store_email, _is_active)
    RETURNING store_id INTO new_store_id;

    -- If store_id is NULL, it means something went wrong (e.g., role_ids not found)
    IF new_store_id IS NULL OR store_maker_role_id IS NULL OR store_checker_role_id IS NULL THEN
        RAISE EXCEPTION 'Failed to create store or retrieve required role IDs. Check if roles exist.';
    END IF;

    -- Create default 'store-maker' user for the new store
    INSERT INTO Users (user_name, password_hash, email, is_active, role_id, store_id)
    VALUES (LOWER(REPLACE(_store_name, ' ', '')) || '_maker', -- e.g., 'newstore_maker'
            crypt('password123', gen_salt('bf', 11)), -- Generate proper BCrypt hash for 'password123'
            LOWER(REPLACE(_store_name, ' ', '')) || '_maker@example.com',
            TRUE,
            store_maker_role_id,
            new_store_id);

    -- Create default 'store-checker' user for the new store
    INSERT INTO Users (user_name, password_hash, email, is_active, role_id, store_id)
    VALUES (LOWER(REPLACE(_store_name, ' ', '')) || '_checker', -- e.g., 'newstore_checker'
            crypt('password123', gen_salt('bf', 11)), -- Generate proper BCrypt hash for 'password123'
            LOWER(REPLACE(_store_name, ' ', '')) || '_checker@example.com',
            TRUE,
            store_checker_role_id,
            new_store_id);

    RETURN new_store_id;
END;
$$ LANGUAGE plpgsql;

-- Example of how to call the function:
-- SELECT create_store_with_users('New Example Store', '789 Elm St', 'Springfield', 'IL', '62701', 'newexample@store.com', TRUE);
-- SELECT create_store_with_users('Another Test Store', '100 Market St', 'Portland', 'OR', '97204', 'anothertest@store.com', TRUE);

-- Create the 'Categories' table
CREATE TABLE Categories (
    category_id SERIAL PRIMARY KEY,             -- Unique identifier for the category
    name VARCHAR(255) NOT NULL UNIQUE,          -- Name of the category, must be unique
    description TEXT,                           -- Description of the category
    code VARCHAR(50) UNIQUE NOT NULL,           -- Unique code for the category
    updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp of the last update
    created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the category was created
    is_active BOOLEAN DEFAULT TRUE              -- Status of the category, defaults to active
);

-- Add dummy data into the 'Categories' table
INSERT INTO Categories (name, description, code, is_active)
VALUES ('Electronics', 'Devices and gadgets like phones, laptops, and TVs.', 'ELEC', TRUE);

INSERT INTO Categories (name, description, code, is_active)
VALUES ('Apparel', 'Clothing, shoes, and accessories for men, women, and children.', 'APRL', TRUE);

INSERT INTO Categories (name, description, code, is_active)
VALUES ('Home Goods', 'Items for home decor, kitchen, and living spaces.', 'HOME', TRUE);

INSERT INTO Categories (name, description, code, is_active)
VALUES ('Books', 'Fiction, non-fiction, and educational books.', 'BOOK', TRUE);

INSERT INTO Categories (name, description, code, is_active)
VALUES ('Groceries', 'Food and beverage items.', 'GROC', TRUE);

-- Create the 'Products' table
CREATE TABLE Products (
    product_id SERIAL PRIMARY KEY,              -- Unique identifier for the product
    name VARCHAR(255) NOT NULL UNIQUE,          -- Name of the product, must be unique
    description TEXT,                           -- Description of the product
    units VARCHAR(50) NOT NULL,                 -- Unit of measurement (e.g., 'pcs', 'kg', 'liter')
    minimum_stock INT DEFAULT 0,                -- Minimum stock level for the product
    maximum_stock INT DEFAULT 1000,             -- Maximum stock level for the product
    current_stock INT DEFAULT 0,                -- Current stock level of the product
    category_id INT NOT NULL,                   -- Foreign key referencing the Categories table
    is_active BOOLEAN DEFAULT TRUE,             -- Status of the product, defaults to active
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the product was created
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp of the last update
    FOREIGN KEY (category_id) REFERENCES Categories(category_id) -- Defines the foreign key relationship
);

-- Add 10 dummy data entries into the 'Products' table.
-- Using ON CONFLICT (name) DO NOTHING for idempotency.
-- We dynamically fetch category_id based on category code.

INSERT INTO Products (name, description, units, minimum_stock, maximum_stock, current_stock, category_id, is_active)
VALUES
    ('Smartphone X', 'Latest model smartphone with advanced features.', 'pcs', 10, 200, 150, (SELECT category_id FROM Categories WHERE code = 'ELEC'), TRUE),
    ('Laptop Pro', 'High-performance laptop for professionals.', 'pcs', 5, 100, 80, (SELECT category_id FROM Categories WHERE code = 'ELEC'), TRUE),
    ('T-Shirt Basic', 'Comfortable cotton t-shirt, various colors.', 'pcs', 50, 500, 300, (SELECT category_id FROM Categories WHERE code = 'APRL'), TRUE),
    ('Jeans Slim Fit', 'Stylish slim fit jeans for everyday wear.', 'pcs', 30, 300, 180, (SELECT category_id FROM Categories WHERE code = 'APRL'), TRUE),
    ('Coffee Maker', 'Automatic drip coffee maker with timer.', 'pcs', 8, 150, 100, (SELECT category_id FROM Categories WHERE code = 'HOME'), TRUE),
    ('Blender Pro', 'Powerful blender for smoothies and shakes.', 'pcs', 7, 120, 75, (SELECT category_id FROM Categories WHERE code = 'HOME'), TRUE),
    ('Science Fiction Novel', 'Award-winning sci-fi novel.', 'pcs', 20, 100, 60, (SELECT category_id FROM Categories WHERE code = 'BOOK'), TRUE),
    ('Cookbook Italian', 'Traditional Italian recipes cookbook.', 'pcs', 15, 80, 40, (SELECT category_id FROM Categories WHERE code = 'BOOK'), TRUE),
    ('Organic Apples', 'Fresh, organic apples (per kg).', 'kg', 100, 500, 250, (SELECT category_id FROM Categories WHERE code = 'GROC'), TRUE),
    ('Whole Milk', 'Pasteurized whole milk (per liter).', 'liter', 200, 1000, 600, (SELECT category_id FROM Categories WHERE code = 'GROC'), TRUE);
